{"version":3,"sources":["components/Burger/BurgerIngredient/BurgerIngredient.css","components/Layout/Layout.css","components/Burger/Burger.css","hoc/Aux.js","components/Layout/Layout.js","components/Burger/BurgerIngredient/BurgerIngredient.js","components/Burger/Burger.js","containers/BurgerBuilder/BurgerBuilder.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BreadBottom","BreadTop","Seeds1","Seeds2","Meat","Cheese","Salad","Bacon","Content","Burger","aux","props","children","layout","react_default","a","createElement","Aux","className","classes","BurgerIngredient","ingredient","this","type","Component","burger","transformedIngredients","Object","keys","ingredients","map","igKey","toConsumableArray","Array","_","i","Burger_BurgerIngredient_BurgerIngredient","key","reduce","arr","el","concat","length","console","log","BurgerBuilder","state","salad","bacon","cheese","meat","Burger_Burger","App","Layout_Layout","containers_BurgerBuilder_BurgerBuilder","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EACAA,EAAAC,QAAA,CAAkBC,YAAA,uCAAAC,SAAA,oCAAAC,OAAA,kCAAAC,OAAA,kCAAAC,KAAA,gCAAAC,OAAA,kCAAAC,MAAA,iCAAAC,MAAA,0DCAlBT,EAAAC,QAAA,CAAkBS,QAAA,2CCAlBV,EAAAC,QAAA,CAAkBU,OAAA,sMCCHC,EAFH,SAAAC,GAAK,OAAIA,EAAMC,0BCYZC,EAPA,SAAAF,GAAK,OAClBG,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAAA,4CACAF,EAAAC,EAAAC,cAAA,QAAME,UAAWC,IAAQX,SAAUG,EAAMC,qDCoC9BQ,mLArCX,IAAIC,EAAa,KAEjB,OAAQC,KAAKX,MAAMY,MACjB,IAAK,eACHF,EAAaP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQnB,cACrC,MACF,IAAK,YACHqB,EACEP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQlB,UACtBa,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQjB,SACxBY,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQhB,UAG5B,MACF,IAAK,OACHkB,EAAaP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQf,OACrC,MACF,IAAK,QACHiB,EAAaP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQZ,QACrC,MACF,IAAK,QACHc,EAAaP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQb,QACrC,MACF,IAAK,SACHe,EAAaP,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQd,SACrC,MACF,QACEgB,EAAa,KAEjB,OAAOA,SA/BoBG,aC8BhBC,EA9BA,SAAAd,GAEb,IAAIe,EAAyBC,OAAOC,KAAKjB,EAAMkB,aAC5CC,IAAI,SAAAC,GACH,OAAOJ,OAAAK,EAAA,EAAAL,CAAIM,MAAMtB,EAAMkB,YAAYE,KAASD,IAAI,SAACI,EAAGC,GAElD,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,CAAkBC,IAAKN,EAAQI,EAAGZ,KAAMQ,QAGlDO,OAAO,SAACC,EAAKC,GACZ,OAAOD,EAAIE,OAAOD,IACjB,IAUL,OARsC,IAAlCd,EAAuBgB,SACzBhB,EAAyBZ,EAAAC,EAAAC,cAAA,6CAK3B2B,QAAQC,IAAIlB,GAGVZ,EAAAC,EAAAC,cAAA,OAAKE,UAAWC,IAAQV,QACtBK,EAAAC,EAAAC,cAACoB,EAAD,CAAkBb,KAAK,cACtBG,EACDZ,EAAAC,EAAAC,cAACoB,EAAD,CAAkBb,KAAK,mBCAdsB,6MAnBbC,MAAQ,CACNjB,YAAa,CACXkB,MAAO,EACPC,MAAO,EACPC,OAAQ,EACRC,KAAM,4EAKR,OACEpC,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACmC,EAAD,CAAQtB,YAAaP,KAAKwB,MAAMjB,cAChCf,EAAAC,EAAAC,cAAA,qCAnBoBQ,aCYb4B,mLAVX,OACEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqC,EAAD,KACEvC,EAAAC,EAAAC,cAACsC,EAAD,eALQ9B,aCOE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.986f2bad.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"BreadBottom\":\"BurgerIngredient__BreadBottom__HuxZP\",\"BreadTop\":\"BurgerIngredient__BreadTop__10-cT\",\"Seeds1\":\"BurgerIngredient__Seeds1__3xHtz\",\"Seeds2\":\"BurgerIngredient__Seeds2__1cUso\",\"Meat\":\"BurgerIngredient__Meat__13nAN\",\"Cheese\":\"BurgerIngredient__Cheese__1FxeY\",\"Salad\":\"BurgerIngredient__Salad__1iTJE\",\"Bacon\":\"BurgerIngredient__Bacon__3vrAI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Content\":\"Layout__Content__LhJtv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Burger\":\"Burger__Burger__3K4F-\"};","const aux = props => props.children;\n\nexport default aux;\n","import React from \"react\";\n\nimport Aux from \"../../hoc/Aux\";\nimport classes from \"./Layout.css\";\n\nconst layout = props => (\n  <Aux>\n    <div>Toolbar, SideDrawer, Backdrop</div>\n    <main className={classes.Content}>{props.children}</main>\n  </Aux>\n);\n\nexport default layout;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport classes from \"./BurgerIngredient.css\";\n\nclass BurgerIngredient extends Component {\n  render() {\n    let ingredient = null;\n\n    switch (this.props.type) {\n      case \"bread-bottom\":\n        ingredient = <div className={classes.BreadBottom} />;\n        break;\n      case \"bread-top\":\n        ingredient = (\n          <div className={classes.BreadTop}>\n            <div className={classes.Seeds1} />\n            <div className={classes.Seeds2} />\n          </div>\n        );\n        break;\n      case \"meat\":\n        ingredient = <div className={classes.Meat} />;\n        break;\n      case \"bacon\":\n        ingredient = <div className={classes.Bacon} />;\n        break;\n      case \"salad\":\n        ingredient = <div className={classes.Salad} />;\n        break;\n      case \"cheese\":\n        ingredient = <div className={classes.Cheese} />;\n        break;\n      default:\n        ingredient = null;\n    }\n    return ingredient;\n  }\n}\n\nBurgerIngredient.propTypes = {\n  type: PropTypes.string.isRequired\n};\n\nexport default BurgerIngredient;\n","import React from \"react\";\n\nimport classes from \"./Burger.css\";\nimport BurgerIngredient from \"./BurgerIngredient/BurgerIngredient\";\n\nconst burger = props => {\n  // console.log(props.ingredients);\n  let transformedIngredients = Object.keys(props.ingredients)\n    .map(igKey => {\n      return [...Array(props.ingredients[igKey])].map((_, i) => {\n        // console.log(igKey, _, i + 1);\n        return <BurgerIngredient key={igKey + i} type={igKey} />;\n      });\n    })\n    .reduce((arr, el) => {\n      return arr.concat(el);\n    }, []);\n\n  if (transformedIngredients.length === 0) {\n    transformedIngredients = <p>Please start adding ingredients</p>;\n  }\n\n  // transformedIngredients.forEach(ingredient => console.log(ingredient.key));\n\n  console.log(transformedIngredients);\n\n  return (\n    <div className={classes.Burger}>\n      <BurgerIngredient type=\"bread-top\" />\n      {transformedIngredients}\n      <BurgerIngredient type=\"bread-bottom\" />\n    </div>\n  );\n};\n\nexport default burger;\n","import React, { Component } from \"react\";\n\nimport Aux from \"../../hoc/Aux\";\nimport Burger from \"../../components/Burger/Burger\";\n\nclass BurgerBuilder extends Component {\n  // constructer(props) {\n  //   super(props);\n  //   this.state = {...}\n  // }\n\n  state = {\n    ingredients: {\n      salad: 0,\n      bacon: 0,\n      cheese: 0,\n      meat: 0\n    }\n  };\n\n  render() {\n    return (\n      <Aux>\n        <Burger ingredients={this.state.ingredients} />\n        <div>Build Controls</div>\n      </Aux>\n    );\n  }\n}\n\nexport default BurgerBuilder;\n","import React, { Component } from \"react\";\n\nimport Layout from \"./components/Layout/Layout\";\nimport BurgerBuilder from \"./containers/BurgerBuilder/BurgerBuilder\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Layout>\n          <BurgerBuilder />\n        </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}